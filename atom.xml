<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Junk I Would Otherwise Forget]]></title>
  <link href="nickmiller.com.au/atom.xml" rel="self"/>
  <link href="nickmiller.com.au/"/>
  <updated>2013-07-06T15:27:03+10:00</updated>
  <id>nickmiller.com.au/</id>
  <author>
    <name><![CDATA[Nick Miller]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to ensure your underware is warm and toasty and ready for you in the morning]]></title>
    <link href="nickmiller.com.au/blog/2013/07/03/warm-underware/"/>
    <updated>2013-07-03T11:39:00+10:00</updated>
    <id>nickmiller.com.au/blog/2013/07/03/warm-underware</id>
    <content type="html"><![CDATA[<p>Two ways:</p>

<ul>
<li>Get your spouse to microwave it.  Careful about burning if synthetic.</li>
<li>Put it in your dog&#8217;s bed.  In the morning, excavate from under dog.  Your dog will be happy as dogs need a job.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notes from reading iText in Action]]></title>
    <link href="nickmiller.com.au/blog/2013/07/03/pdfs/"/>
    <updated>2013-07-03T10:30:00+10:00</updated>
    <id>nickmiller.com.au/blog/2013/07/03/pdfs</id>
    <content type="html"><![CDATA[<p>PDFs are not a declarative layout language like XAML.  They are a bunch of instructions to a renderer, and a bunch of them are in sequence.</p>

<p>Eg:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>canvas.saveState();                               // q
</span><span class='line'>canvas.beginText();                               // BT
</span><span class='line'>canvas.moveText(36, 788);                         // 36 788 Td
</span><span class='line'>canvas.setFontAndSize(BaseFont.createFont(), 12); // /F1 12 Tf
</span><span class='line'>canvas.showText("Hello World");                   // (Hello World)Tj
</span><span class='line'>canvas.endText();                                 // ET
</span><span class='line'>canvas.restoreState();                            // Q</span></code></pre></td></tr></table></div></figure>


<h1>Basic steps to create new doc with iText:</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">Document</span> <span class="n">document</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Document</span><span class="p">();</span>
</span><span class='line'><span class="n">PdfWriter</span><span class="p">.</span><span class="n">getInstance</span><span class="p">(</span><span class="n">document</span><span class="p">,</span> <span class="k">new</span> <span class="n">FileOutputStream</span><span class="p">(</span><span class="n">filename</span><span class="p">));</span>
</span><span class='line'><span class="n">document</span><span class="p">.</span><span class="n">open</span><span class="p">();</span>
</span><span class='line'><span class="n">document</span><span class="p">.</span><span class="k">add</span><span class="p">(</span><span class="k">new</span> <span class="n">Paragraph</span><span class="p">(</span><span class="s">&quot;Hello World!&quot;</span><span class="p">));</span>
</span><span class='line'><span class="n">document</span><span class="p">.</span><span class="n">close</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Basic parts of PDF in iText&#8217;s object model:</h1>

<ul>
<li>Chunk: smallest thing that can be added to a document.  Images get added in a chunk.</li>
<li>Phrases: can be composed of chunks</li>
<li>Paragraph: a phrase with extra properties and new line at the end</li>
<li>List: sequence of paragraphs</li>
<li>Chapter: contains one or more section objects.  Inherits from LargeElement.</li>
<li>Section: set a bookmark on this and you get nice little table of contents in reader apps.  Inherits from LargeElement.</li>
<li>Anchor: for hypelinks</li>
</ul>


<p>Lower level objects match objects in PDF spec:</p>

<ul>
<li>PdfDicitonary</li>
<li>PdfName</li>
<li>PdfNumber</li>
<li>PdfBoolean</li>
<li>PdfArray</li>
<li>etc&#8230;</li>
</ul>


<p>Objects in PDF doc can have direct or indirect references</p>

<ul>
<li>Indirect objects:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na">[object number]</span> <span class="m">0</span> <span class="n">obj</span>
</span><span class='line'><span class="p">&lt;&lt;</span>
</span><span class='line'><span class="na">[metadata about object]</span>
</span><span class='line'><span class="p">&gt;&gt;</span>
</span><span class='line'><span class="na">[binary content in a stream]</span>
</span><span class='line'><span class="n">end</span> <span class="n">obj</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the PDF doc itself, the main parts are:</p>

<ul>
<li>header</li>
<li>body</li>
<li>cross reference table (like dictionary for objects in the body)</li>
<li>trailer (locates cross reference table)</li>
</ul>


<p>Content layers, numbered 1 to 4:</p>

<ul>
<li>1 and 4 are for direct content</li>
<li>2 and 3 are for higher level objects, like chunks, sections, chapters etc.</li>
<li>1 is the bottom layer - under text and graphhics</li>
<li>4 is the top layer- over text and graphics</li>
</ul>


<h1>Get writer for top layer:</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">PdfWriter</span><span class="p">.</span><span class="n">getDirectContent</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Get writer for bottom layer:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">PdfWriter</span><span class="p">.</span><span class="n">getDirectContentUnder</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Main classes for manipulating Pdf:</h1>

<ul>
<li>PdfWriter</li>
<li>PdfStamper</li>
<li>PdfImportedPage</li>
<li>PdfCopy</li>
</ul>


<h1>Reading docs</h1>

<p>To read PDF doc, use PdfReader.  Can tell you high level things about the doc like:</p>

<ul>
<li>pages</li>
<li>rotation of pages</li>
<li>length</li>
<li>whether encrypted</li>
</ul>


<p>Get content stream of the page - the raw stream of the page with underlying PDF syntax:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">content</span> <span class="n">stream</span> <span class="p">=</span> <span class="n">PdfReader</span><span class="p">.</span><span class="n">GetContentStream</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<h1>How to extract a page from PDF:</h1>

<ul>
<li>DON&#8217;T attempt to extract a page using the PdfReader.</li>
<li>Pass the PdfReader to a PdfWriter and ask it to copy the page to another PDF.</li>
<li>This will give you a PdfImportedPage object.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">Document</span> <span class="n">document</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Document</span><span class="p">();</span>
</span><span class='line'><span class="n">PdfWriter</span> <span class="n">writer</span> <span class="p">=</span> <span class="n">PdfWriter</span><span class="p">.</span><span class="n">getInstance</span><span class="p">(</span><span class="n">document</span><span class="p">,</span> <span class="k">new</span> <span class="n">FileOutputStream</span><span class="p">(</span><span class="s">&quot;extractPage.pdf&quot;</span><span class="p">));</span>
</span><span class='line'><span class="n">document</span><span class="p">.</span><span class="n">open</span><span class="p">();</span>
</span><span class='line'><span class="n">PdfReader</span> <span class="n">reader</span> <span class="p">=</span> <span class="k">new</span> <span class="n">PdfReader</span><span class="p">(</span><span class="s">&quot;sourceDocument.pdf&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">PdfImportedPage</span> <span class="n">page</span> <span class="p">=</span> <span class="n">writer</span><span class="p">.</span><span class="n">getImportedPage</span><span class="p">(</span><span class="n">reader</span><span class="p">,</span> <span class="m">1</span><span class="p">);</span>
</span><span class='line'><span class="c1">// do something with it</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<h1>To put a header and footer or stationary on a PDF:</h1>

<ul>
<li>create the stationary in one PDF</li>
<li>import that page</li>
<li>superimpose that page on the target PDF</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// open reader with source doc</span>
</span><span class='line'><span class="c1">// open target doc in writer</span>
</span><span class='line'><span class="c1">// create pdfContentByte by calling getDirectContent on the writer</span>
</span><span class='line'><span class="c1">// call addTemplate on the contentByte and feed it the imported page</span>
</span><span class='line'><span class="n">PdfReader</span> <span class="n">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PdfReader</span><span class="o">(</span><span class="s">&quot;stationary.pdf&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">Document</span> <span class="n">document</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Document</span><span class="o">();</span>
</span><span class='line'><span class="n">PdfWriter</span> <span class="n">writer</span> <span class="o">=</span> <span class="n">PdfWriter</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="n">document</span><span class="o">,</span> <span class="k">new</span> <span class="n">FileOutputStream</span><span class="o">(</span><span class="s">&quot;result.pdf&quot;</span><span class="o">));</span>
</span><span class='line'><span class="n">document</span><span class="o">.</span><span class="na">open</span><span class="o">();</span>
</span><span class='line'><span class="n">PdfContentByte</span> <span class="n">canvas</span> <span class="o">=</span> <span class="n">writer</span><span class="o">.</span><span class="na">getDirectContent</span><span class="o">();</span>
</span><span class='line'><span class="n">PdfImportedPage</span> <span class="n">page</span><span class="o">;</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">reader</span><span class="o">.</span><span class="na">getNumberOfPages</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">page</span> <span class="o">=</span> <span class="n">writer</span><span class="o">.</span><span class="na">getImportedPage</span><span class="o">(</span><span class="n">reader</span><span class="o">,</span> <span class="n">i</span><span class="o">);</span>
</span><span class='line'>            <span class="n">canvas</span><span class="o">.</span><span class="na">addTemplate</span><span class="o">(</span><span class="n">page</span><span class="o">,</span> <span class="mi">1</span><span class="n">f</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'><span class="n">document</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'><span class="n">reader</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Problem with this: annotations are not part of the content stream, they are part of the annotations dictionary.
They are not copied when using PdfImportedPage.</p>

<h1>To stamp a page using PdfStamper:</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">PdfReader</span> <span class="n">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PdfReader</span><span class="o">(</span><span class="n">src</span><span class="o">);</span>
</span><span class='line'><span class="n">PdfStamper</span> <span class="n">stamper</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PdfStamper</span><span class="o">(</span><span class="n">reader</span><span class="o">,</span> <span class="k">new</span> <span class="n">FileOutputStream</span><span class="o">(</span><span class="n">dest</span><span class="o">));</span>
</span><span class='line'><span class="n">PdfContentByte</span> <span class="n">canvas</span> <span class="o">=</span> <span class="n">stamper</span><span class="o">.</span><span class="na">getOverContent</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span> <span class="c1">// note: compare to &#39;getDirectContent()&#39; method on PdfWriter</span>
</span><span class='line'><span class="n">ColumnText</span><span class="o">.</span><span class="na">showTextAligned</span><span class="o">(</span><span class="n">canvas</span><span class="o">,</span> <span class="n">Element</span><span class="o">.</span><span class="na">ALIGN_LEFT</span><span class="o">,</span> <span class="k">new</span> <span class="n">Phrase</span><span class="o">(</span><span class="s">&quot;Hello people!&quot;</span><span class="o">),</span> <span class="mi">36</span><span class="o">,</span> <span class="mi">540</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'><span class="n">stamper</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'><span class="n">reader</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Generally, use PdfStamper for adding to existing files and PdfWriter for building up files from scratch.</p>

<h1>To concatenate files:</h1>

<ul>
<li>new Document</li>
<li>new PdfCopy with target stream</li>
<li>make new PdfReader for each source doc, iterating through the pages.</li>
<li>call GetImportedPage on the PdfCopy, passing it the reader for each source document.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Document</span> <span class="n">document</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Document</span><span class="o">();</span>
</span><span class='line'><span class="n">PdfCopy</span> <span class="n">copy</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PdfCopy</span><span class="o">(</span><span class="n">document</span><span class="o">,</span> <span class="k">new</span> <span class="n">FileOutputStream</span><span class="o">(</span><span class="s">&quot;targetFile.pdf&quot;</span><span class="o">));</span>
</span><span class='line'><span class="n">document</span><span class="o">.</span><span class="na">open</span><span class="o">();</span>
</span><span class='line'><span class="n">PdfReader</span> <span class="n">reader</span><span class="o">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">n</span><span class="o">;</span>
</span><span class='line'><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">files</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PdfReader</span><span class="o">(</span><span class="n">files</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
</span><span class='line'>  <span class="n">n</span> <span class="o">=</span> <span class="n">reader</span><span class="o">.</span><span class="na">getNumberOfPages</span><span class="o">();</span>
</span><span class='line'>  <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">page</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">page</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">copy</span><span class="o">.</span><span class="na">addPage</span><span class="o">(</span><span class="n">copy</span><span class="o">.</span><span class="na">getImportedPage</span><span class="o">(</span><span class="n">reader</span><span class="o">,</span> <span class="o">++</span><span class="n">page</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="n">copy</span><span class="o">.</span><span class="na">freeReader</span><span class="o">(</span><span class="n">reader</span><span class="o">);</span>
</span><span class='line'>  <span class="n">reader</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">document</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>PdfCopy does not copy forms and some other stuff.  See PdfSmartCopy.</p>

<h1>To draw something onto the doc at a particular position:</h1>

<ul>
<li>subclass VerticalPositionMark.  It has a draw() method so you can add it to a Document object.</li>
<li>Imprement Draw interface, then wrap class in a chunk so you can add it to Document object.</li>
</ul>


<p>How to get the raw underlying pdf syntax:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">byte</span><span class="o">[]</span> <span class="n">pdfStreamAsText</span> <span class="o">=</span> <span class="n">yourPdfReader</span><span class="o">.</span><span class="na">GetPageContent</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to specify Windows credentials in odata client]]></title>
    <link href="nickmiller.com.au/blog/2013/05/18/windows-creditials/"/>
    <updated>2013-05-18T17:20:00+10:00</updated>
    <id>nickmiller.com.au/blog/2013/05/18/windows-creditials</id>
    <content type="html"><![CDATA[<p>This is when you get the 401 challenge trying to access an ODATA feed.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="p">&lt;</span><span class="n">your</span> <span class="n">data</span> <span class="n">context</span> <span class="n">class</span><span class="p">&gt;.</span><span class="n">Credentials</span> <span class="p">=</span> <span class="n">System</span><span class="p">.</span><span class="n">Net</span><span class="p">.</span><span class="n">CredentialCache</span><span class="p">.</span><span class="n">DefaultCredentials</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[how compress pdf in linux]]></title>
    <link href="nickmiller.com.au/blog/2013/05/11/compress-pdf/"/>
    <updated>2013-05-11T19:11:00+10:00</updated>
    <id>nickmiller.com.au/blog/2013/05/11/compress-pdf</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gs -sDEVICE<span class="o">=</span>pdfwrite -dCompatibilityLevel<span class="o">=</span>1.4 -dPDFSETTINGS<span class="o">=</span>/screen -dNOPAUSE -dQUIET -dBATCH -sOutputFile<span class="o">=</span>output.pdf input.pdf
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[how-to-require-parameterless-constructor-in-generic-class-definition]]></title>
    <link href="nickmiller.com.au/blog/2013/04/10/how-to-require-parameterless-constructor-in-generic-classs-definition/"/>
    <updated>2013-04-10T10:05:00+10:00</updated>
    <id>nickmiller.com.au/blog/2013/04/10/how-to-require-parameterless-constructor-in-generic-classs-definition</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">class</span> <span class="nc">ItemFactory</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="k">where</span> <span class="n">T</span> <span class="p">:</span> <span class="k">new</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">public</span> <span class="n">T</span> <span class="nf">GetNewItem</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">new</span> <span class="nf">T</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ascetic acid content of always fresh vinegar]]></title>
    <link href="nickmiller.com.au/blog/2013/04/07/ascetic-acid-content-of-always-fresh-vinegar/"/>
    <updated>2013-04-07T16:35:00+10:00</updated>
    <id>nickmiller.com.au/blog/2013/04/07/ascetic-acid-content-of-always-fresh-vinegar</id>
    <content type="html"><![CDATA[<p>4.0 - 4.4%</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[get most recent file in bash]]></title>
    <link href="nickmiller.com.au/blog/2013/04/03/get-most-recent-file-in-bash/"/>
    <updated>2013-04-03T12:29:00+11:00</updated>
    <id>nickmiller.com.au/blog/2013/04/03/get-most-recent-file-in-bash</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>doSomethingCommand <span class="sb">`</span>ls | tail -n1<span class="err">&#39;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How To Mock Method With Moq]]></title>
    <link href="nickmiller.com.au/blog/2013/04/03/how-to-mock-method-with-moq/"/>
    <updated>2013-04-03T12:17:00+11:00</updated>
    <id>nickmiller.com.au/blog/2013/04/03/how-to-mock-method-with-moq</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">mock</span><span class="p">.</span><span class="n">Setup</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">DoSomething</span><span class="p">(</span><span class="n">It</span><span class="p">.</span><span class="n">IsAny</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;()))</span>
</span><span class='line'>                <span class="p">.</span><span class="n">Returns</span><span class="p">((</span><span class="kt">string</span> <span class="n">s</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="n">s</span><span class="p">.</span><span class="n">ToLower</span><span class="p">());</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to understand MTF graphs]]></title>
    <link href="nickmiller.com.au/blog/2013/03/21/mtf/"/>
    <updated>2013-03-21T21:12:00+11:00</updated>
    <id>nickmiller.com.au/blog/2013/03/21/mtf</id>
    <content type="html"><![CDATA[<p>MTF stands for &#8216;Modulation Transfer Function&#8217;.  It is a function which tells how many line pairs can be distinguished per unit of distance for a given value between 0 and 1.  As number of line pairs increases, MTF decreases because of diffraction.  At 1, there is perfect contrast.  At zero, there is no contrast.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How does x:Name attribute magically pop up in the code behind?]]></title>
    <link href="nickmiller.com.au/blog/2013/02/14/xaml-name-attributes/"/>
    <updated>2013-02-14T11:15:00+11:00</updated>
    <id>nickmiller.com.au/blog/2013/02/14/xaml-name-attributes</id>
    <content type="html"><![CDATA[<p>&#8220;The specified x:Name becomes the name of a field that is created in the underlying code when XAML is processed, and that field holds a reference to the object. In Silverlight, using the managed API, the process of creating this field is performed by the MSBuild target steps, which also are responsible for joining the partial classes for a XAML file and its code-behind. &#8221;</p>

<p>The name applies for a XAML namescope.</p>

<p>All the XAML in a single XAML file can be in one namescope.  So the name applies for all the elements in that XAML file.</p>

<p>So that&#8217;s why you can access it anywhere in the code behind for that XAML file.</p>

<p>http://msdn.microsoft.com/en-us/library/cc189028(v=vs.95).aspx</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to register HTTP handler in web.config in IIS 7]]></title>
    <link href="nickmiller.com.au/blog/2013/01/18/httphandlers/"/>
    <updated>2013-01-18T15:26:00+11:00</updated>
    <id>nickmiller.com.au/blog/2013/01/18/httphandlers</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;system.webServer&gt;</span>
</span><span class='line'><span class="nt">&lt;handlers&gt;</span>
</span><span class='line'><span class="nt">&lt;add</span> <span class="na">path=</span><span class="s">&quot;RelativePathWithoutLeadingOrTrailingBackslashOrAlternativelyAFileNameOrGlobFilePattern&quot;</span>
</span><span class='line'><span class="na">verb=</span><span class="s">&quot;*&quot;</span>
</span><span class='line'><span class="na">type=</span><span class="s">&quot;ClassNameOfHTTPHandlerClassIncludingFullNamspace, AssemblyNameOfHandlerClassIfReferencedAssemblyFromWebProject&quot;</span>
</span><span class='line'><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/handlers&gt;</span>
</span><span class='line'><span class="nt">&lt;/system.webServer&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Full options on MSDN: http://msdn.microsoft.com/en-us/library/ms691481(v=vs.90).aspx</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to bind to a property on an immediate ancestor (parent) control in XAML in Silverlight?]]></title>
    <link href="nickmiller.com.au/blog/2013/01/17/how-to-bind-to-a-property-on-an-ancestor-control-in-xaml-in-silverlight/"/>
    <updated>2013-01-17T17:20:00+11:00</updated>
    <id>nickmiller.com.au/blog/2013/01/17/how-to-bind-to-a-property-on-an-ancestor-control-in-xaml-in-silverlight</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;ElementYouWantToSetPropertyIn</span> <span class="na">PropertyYouWantToSet=</span><span class="s">{Binding</span> <span class="na">RelativeSource=</span><span class="s">{RelativeSource</span> <span class="na">Mode=</span><span class="s">FindAncestor,</span> <span class="na">AncestorLevel=</span><span class="s">1,</span> <span class="na">AncestorType=</span><span class="s">namespaceOfType:AncestorTypeName}</span> <span class="na">Path=</span><span class="s">PropertyOnAncestor}&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Order of Lightswitch screen events]]></title>
    <link href="nickmiller.com.au/blog/2013/01/03/lightswitch-cheat-sheet/"/>
    <updated>2013-01-03T17:33:00+11:00</updated>
    <id>nickmiller.com.au/blog/2013/01/03/lightswitch-cheat-sheet</id>
    <content type="html"><![CDATA[<p>When opening a new screen:</p>

<ol>
<li>Run.  (It&#8217;s in Application namespace.  Screen paramaters are arguments.)</li>
<li>InitialiseDataWorkspace.  Appears to happen BEFORE data context gets hydrated from database.</li>
<li>Now loads custom controls. (ControlAvailable events fire when done.)</li>
<li>CanRun</li>
<li>Created</li>
<li>Activated</li>
<li>Validate on all the entity properties.</li>
<li>Loaded</li>
</ol>


<p>When navigating back to an already open screen:</p>

<ol>
<li>Activated</li>
<li>Control available events fire.</li>
</ol>


<p>To do something with a custom control on load (like set its view model or feed it some data), use FindControl in the <em>Activated hook, then hook into the Control_Available event.  Don&#8217;t use </em>Activated - it may appear to work, but this is just dumb luck.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git cheat sheet]]></title>
    <link href="nickmiller.com.au/blog/2012/12/31/git-cheat-sheet/"/>
    <updated>2012-12-31T08:51:00+11:00</updated>
    <id>nickmiller.com.au/blog/2012/12/31/git-cheat-sheet</id>
    <content type="html"><![CDATA[<p>Dredge up files deleted by previous lameness:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#Change to location where files deleted</span>
</span><span class='line'><span class="nb">cd </span>wherever
</span><span class='line'><span class="c"># Find last commit that affected this dir</span>
</span><span class='line'>git log -- .
</span><span class='line'><span class="c"># diff commits to find where deleted</span>
</span><span class='line'>git diff <span class="o">[</span>commit 1 <span class="nb">hash</span><span class="o">]</span> <span class="o">[</span>commit 2 <span class="nb">hash</span><span class="o">]</span>
</span><span class='line'><span class="c"># checkout files you deleted from last good commit</span>
</span><span class='line'>git checkout <span class="o">[</span><span class="nb">hash </span>of commit with files you want<span class="o">]</span> -- .<span class="se">\*</span>*
</span><span class='line'><span class="c"># short log of last five commits</span>
</span><span class='line'>git log --oneline -5
</span></code></pre></td></tr></table></div></figure>


<p>Rolling back:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git reset -h
</span></code></pre></td></tr></table></div></figure>


<p>or to create new commit reversing bad one:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git revert &lt;<span class="nb">hash </span>of bad commit&gt;
</span></code></pre></td></tr></table></div></figure>


<p>or to roll back multiple commits, using temporary branch</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git branch temp &lt;<span class="nb">hash </span>of last good commit&gt;
</span><span class='line'>git checkout temp
</span><span class='line'>git reset --soft master <span class="c">#  moves pointer in temp branch to latest from master so we can merge</span>
</span><span class='line'>git commit -am <span class="s2">&quot;back to last good commit&quot;</span>
</span><span class='line'>git checkout master
</span><span class='line'>git merge temp
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WPF Cheat Sheet]]></title>
    <link href="nickmiller.com.au/blog/2012/12/21/wpf-cheat-sheet/"/>
    <updated>2012-12-21T06:52:00+11:00</updated>
    <id>nickmiller.com.au/blog/2012/12/21/wpf-cheat-sheet</id>
    <content type="html"><![CDATA[<p>IValueConverter:
Convert goes source object -> UI
ConvertBack goes UI -> source object
&#8216;paramater is passed in by UI.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;ObjectDataProvider</span> <span class="na">x:Key=</span><span class="s">&quot;ZoomOptions&quot;</span>
</span><span class='line'><span class="na">MethodName=</span><span class="s">&quot;GetNames&quot;</span>
</span><span class='line'><span class="na">ObjectType=</span><span class="s">&quot;{x:Type sys:Enum}&quot;</span>
</span><span class='line'><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;ObjectDataProvider.MethodParameters&gt;</span>
</span><span class='line'><span class="nt">&lt;x:Type</span> <span class="na">TypeName=</span><span class="s">&quot;bll:enumZoomOptions&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/ObjectDataProvider.MethodParameters&gt;</span>
</span><span class='line'><span class="nt">&lt;/ObjectDataProvider&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;ComboBox</span> <span class="na">ItemsSource=</span><span class="s">&quot;{Binding Source={StaticResource ZoomOptions}}&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Run NuGet on build so you don't have to keep libs in source control]]></title>
    <link href="nickmiller.com.au/blog/2012/11/20/run-nuget-on-build-so-you-dont-have-to-keep-libs-in-source-control/"/>
    <updated>2012-11-20T20:14:10+11:00</updated>
    <id>nickmiller.com.au/blog/2012/11/20/run-nuget-on-build-so-you-dont-have-to-keep-libs-in-source-control</id>
    <content type="html"><![CDATA[<ul>
<li>Check &#8216;Allow nuget to download missing packages during build&#8217;.  (Tools: Library Package Manager: Package Manager Settings).</li>
<li>Check in repositories.config (in packages dir) and packages.config files (one for each project).</li>
<li>Check in .nuget folder from root of solution (yes, even including the .exe)</li>
<li>Right-click on Solution file -> Enable Nuget Package Restore</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Location of Windows 8 log files]]></title>
    <link href="nickmiller.com.au/blog/2012/11/16/location-of-windows-8-log-files/"/>
    <updated>2012-11-16T21:38:14+11:00</updated>
    <id>nickmiller.com.au/blog/2012/11/16/location-of-windows-8-log-files</id>
    <content type="html"><![CDATA[<p>$windows.~bt\Sources\Panther: Log location before Setup can access the drive.
$windows.~bt\Sources\Rollback: Log location when Setup rolls back in the event of a fatal error.
%WINDIR%\Panther: Log location of Setup actions after disk configuration.
%WINDIR%\Inf\Setupapi*.log: Used to log Plug and Play device installations.
%WINDIR%\Memory.dmp: Location of memory dump from bug checks.
%WINDIR%\Minidump*.dmp: Location of log minidumps from bug checks.
%WINDIR%\System32\Sysprep\Panther: Location of Sysprep logs.
%WINDIR%\System32\LogFiles\Srt\SrtTrail.txt: Startup repair log.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Expand root partition on Windows EC2 instance using AWS Console]]></title>
    <link href="nickmiller.com.au/blog/2012/11/15/expand-root-partition-on-windows-ec2-instance-using-aws-console/"/>
    <updated>2012-11-15T20:28:21+11:00</updated>
    <id>nickmiller.com.au/blog/2012/11/15/expand-root-partition-on-windows-ec2-instance-using-aws-console</id>
    <content type="html"><![CDATA[<ul>
<li>Stop instance.</li>
<li>Create AMI from instance, choosing to expand partition.</li>
<li>Start instance and log in</li>
<li>Control Panel -> Create and Format Disk Partitions</li>
<li>Extend partition</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Path to localDB instances]]></title>
    <link href="nickmiller.com.au/blog/2012/11/09/path-to-localdb-instances/"/>
    <updated>2012-11-09T23:42:08+11:00</updated>
    <id>nickmiller.com.au/blog/2012/11/09/path-to-localdb-instances</id>
    <content type="html"><![CDATA[<h2>C:\Users{user name}\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances></h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Validate XML file against schema]]></title>
    <link href="nickmiller.com.au/blog/2012/11/09/validate-xml-file-against-schema/"/>
    <updated>2012-11-09T22:39:53+11:00</updated>
    <id>nickmiller.com.au/blog/2012/11/09/validate-xml-file-against-schema</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'>    <span class="c1">/// </span>
</span><span class='line'>    <span class="c1">/// Validates XML file against schema.</span>
</span><span class='line'>    <span class="c1">/// </span>
</span><span class='line'>    <span class="k">internal</span> <span class="k">class</span> <span class="nc">Validator</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IEnumerable</span> <span class="n">_filesToValidate</span><span class="p">;</span>
</span><span class='line'>        <span class="k">private</span> <span class="k">readonly</span> <span class="n">XmlSchemaSet</span> <span class="n">_xmlSchemaSet</span><span class="p">;</span>
</span><span class='line'>        <span class="k">private</span> <span class="kt">int</span> <span class="n">_errorCount</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// no namespaces in schema or target</span>
</span><span class='line'>        <span class="k">public</span> <span class="nf">Validator</span><span class="p">(</span><span class="n">IEnumerable</span> <span class="n">filesToValidate</span><span class="p">,</span> <span class="kt">string</span> <span class="n">pathToSchema</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">_filesToValidate</span> <span class="p">=</span> <span class="n">filesToValidate</span><span class="p">;</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">schemaSet</span> <span class="p">=</span> <span class="k">new</span> <span class="n">XmlSchemaSet</span><span class="p">();</span>
</span><span class='line'>            <span class="n">schemaSet</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="k">null</span><span class="p">,</span> <span class="n">pathToSchema</span><span class="p">);</span>
</span><span class='line'>            <span class="n">_xmlSchemaSet</span> <span class="p">=</span> <span class="n">schemaSet</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="nf">Validator</span><span class="p">(</span><span class="n">IEnumerable</span> <span class="n">filesToValidate</span><span class="p">,</span> <span class="n">XmlSchemaSet</span> <span class="n">xmlSchemaSet</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">_filesToValidate</span> <span class="p">=</span> <span class="n">filesToValidate</span><span class="p">;</span>
</span><span class='line'>            <span class="n">_xmlSchemaSet</span> <span class="p">=</span> <span class="n">xmlSchemaSet</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="kt">bool</span> <span class="nf">AllValid</span><span class="p">()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">_errorCount</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>            <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">file</span> <span class="k">in</span> <span class="n">_filesToValidate</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">ValidateFile</span><span class="p">(</span><span class="n">file</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">String</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="s">&quot;\nTotal error count: {0}&quot;</span><span class="p">,</span><span class="n">_errorCount</span><span class="p">));</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">_errorCount</span> <span class="p">==</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        <span class="k">void</span> <span class="nf">ValidateFile</span><span class="p">(</span><span class="kt">string</span> <span class="n">file</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="kt">var</span> <span class="n">settings</span> <span class="p">=</span> <span class="k">new</span> <span class="n">XmlReaderSettings</span><span class="p">();</span>
</span><span class='line'>            <span class="n">settings</span><span class="p">.</span><span class="n">Schemas</span> <span class="p">=</span> <span class="n">_xmlSchemaSet</span><span class="p">;</span>
</span><span class='line'>       <span class="c1">//     settings.ValidationFlags =</span>
</span><span class='line'>       <span class="c1">//XmlSchemaValidationFlags.ReportValidationWarnings |</span>
</span><span class='line'>       <span class="c1">//XmlSchemaValidationFlags.ProcessIdentityConstraints |</span>
</span><span class='line'>       <span class="c1">//XmlSchemaValidationFlags.ProcessInlineSchema |</span>
</span><span class='line'>       <span class="c1">//XmlSchemaValidationFlags.ProcessSchemaLocation;</span>
</span><span class='line'>            <span class="n">settings</span><span class="p">.</span><span class="n">ValidationType</span> <span class="p">=</span> <span class="n">ValidationType</span><span class="p">.</span><span class="n">Schema</span><span class="p">;</span>
</span><span class='line'>            <span class="n">settings</span><span class="p">.</span><span class="n">CloseInput</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>            <span class="n">settings</span><span class="p">.</span><span class="n">ValidationEventHandler</span> <span class="p">+=</span> <span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="n">e</span><span class="p">)</span> <span class="p">=&gt;</span>
</span><span class='line'>                                                   <span class="p">{</span>
</span><span class='line'>                                                       <span class="n">_errorCount</span><span class="p">++;</span>
</span><span class='line'>                                                       <span class="kt">var</span> <span class="n">message</span> <span class="p">=</span> <span class="n">String</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="s">&quot;Line: {0} of {1}: {2}&quot;</span><span class="p">,</span>
</span><span class='line'>                                                                                   <span class="n">e</span><span class="p">.</span><span class="n">Exception</span><span class="p">.</span><span class="n">LineNumber</span><span class="p">,</span> <span class="n">file</span><span class="p">,</span> <span class="n">e</span><span class="p">.</span><span class="n">Message</span><span class="p">);</span>
</span><span class='line'>                                                       <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">message</span><span class="p">);</span>
</span><span class='line'>                                                   <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>            <span class="k">using</span> <span class="p">(</span><span class="n">XmlReader</span> <span class="n">xmlReader</span> <span class="p">=</span> <span class="n">XmlReader</span><span class="p">.</span><span class="n">Create</span><span class="p">(</span><span class="n">file</span><span class="p">,</span> <span class="n">settings</span><span class="p">))</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="k">while</span> <span class="p">(</span><span class="n">xmlReader</span><span class="p">.</span><span class="n">Read</span><span class="p">())</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
