<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: exocortex | Junk I Would Otherwise Forget]]></title>
  <link href="nickmiller.com.au/blog/categories/exocortex/atom.xml" rel="self"/>
  <link href="nickmiller.com.au/"/>
  <updated>2013-07-26T09:35:35+10:00</updated>
  <id>nickmiller.com.au/</id>
  <author>
    <name><![CDATA[Nick Miller]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Run NuGet on build so you don't have to keep libs in source control]]></title>
    <link href="nickmiller.com.au/blog/2012/11/20/run-nuget-on-build-so-you-dont-have-to-keep-libs-in-source-control/"/>
    <updated>2012-11-20T20:14:10+11:00</updated>
    <id>nickmiller.com.au/blog/2012/11/20/run-nuget-on-build-so-you-dont-have-to-keep-libs-in-source-control</id>
    <content type="html"><![CDATA[<ul>
<li>Check 'Allow nuget to download missing packages during build'.  (Tools: Library Package Manager: Package Manager Settings).</li>
<li>Check in repositories.config (in packages dir) and packages.config files (one for each project).</li>
<li>Check in .nuget folder from root of solution (yes, even including the .exe)</li>
<li>Right-click on Solution file -> Enable Nuget Package Restore</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Location of Windows 8 log files]]></title>
    <link href="nickmiller.com.au/blog/2012/11/16/location-of-windows-8-log-files/"/>
    <updated>2012-11-16T21:38:14+11:00</updated>
    <id>nickmiller.com.au/blog/2012/11/16/location-of-windows-8-log-files</id>
    <content type="html"><![CDATA[<p>$windows.~bt\Sources\Panther: Log location before Setup can access the drive.
$windows.~bt\Sources\Rollback: Log location when Setup rolls back in the event of a fatal error.
%WINDIR%\Panther: Log location of Setup actions after disk configuration.
%WINDIR%\Inf\Setupapi*.log: Used to log Plug and Play device installations.
%WINDIR%\Memory.dmp: Location of memory dump from bug checks.
%WINDIR%\Minidump*.dmp: Location of log minidumps from bug checks.
%WINDIR%\System32\Sysprep\Panther: Location of Sysprep logs.
%WINDIR%\System32\LogFiles\Srt\SrtTrail.txt: Startup repair log.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Expand root partition on Windows EC2 instance using AWS Console]]></title>
    <link href="nickmiller.com.au/blog/2012/11/15/expand-root-partition-on-windows-ec2-instance-using-aws-console/"/>
    <updated>2012-11-15T20:28:21+11:00</updated>
    <id>nickmiller.com.au/blog/2012/11/15/expand-root-partition-on-windows-ec2-instance-using-aws-console</id>
    <content type="html"><![CDATA[<ul>
<li>Stop instance.</li>
<li>Create AMI from instance, choosing to expand partition.</li>
<li>Start instance and log in</li>
<li>Control Panel -> Create and Format Disk Partitions</li>
<li>Extend partition</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Path to localDB instances]]></title>
    <link href="nickmiller.com.au/blog/2012/11/09/path-to-localdb-instances/"/>
    <updated>2012-11-09T23:42:08+11:00</updated>
    <id>nickmiller.com.au/blog/2012/11/09/path-to-localdb-instances</id>
    <content type="html"><![CDATA[<h2>C:\Users{user name}\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances></h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Validate XML file against schema]]></title>
    <link href="nickmiller.com.au/blog/2012/11/09/validate-xml-file-against-schema/"/>
    <updated>2012-11-09T22:39:53+11:00</updated>
    <id>nickmiller.com.au/blog/2012/11/09/validate-xml-file-against-schema</id>
    <content type="html"><![CDATA[<p>```csharp</p>

<pre><code>/// 
/// Validates XML file against schema.
/// 
internal class Validator
{
    private readonly IEnumerable _filesToValidate;
    private readonly XmlSchemaSet _xmlSchemaSet;
    private int _errorCount = 0;

    // no namespaces in schema or target
    public Validator(IEnumerable filesToValidate, string pathToSchema)
    {
        _filesToValidate = filesToValidate;
        var schemaSet = new XmlSchemaSet();
        schemaSet.Add(null, pathToSchema);
        _xmlSchemaSet = schemaSet;
    }


    public Validator(IEnumerable filesToValidate, XmlSchemaSet xmlSchemaSet)
    {
        _filesToValidate = filesToValidate;
        _xmlSchemaSet = xmlSchemaSet;
    }

    public bool AllValid()
    {
        _errorCount = 0;
        foreach (var file in _filesToValidate)
        {
            ValidateFile(file);
        }
        Console.WriteLine(String.Format("\nTotal error count: {0}",_errorCount));
        return _errorCount == 0;

    }


    void ValidateFile(string file)
    {

        var settings = new XmlReaderSettings();
        settings.Schemas = _xmlSchemaSet;
   //     settings.ValidationFlags =
   //XmlSchemaValidationFlags.ReportValidationWarnings |
   //XmlSchemaValidationFlags.ProcessIdentityConstraints |
   //XmlSchemaValidationFlags.ProcessInlineSchema |
   //XmlSchemaValidationFlags.ProcessSchemaLocation;
        settings.ValidationType = ValidationType.Schema;
        settings.CloseInput = true;
        settings.ValidationEventHandler += (o, e) =&gt;
                                               {
                                                   _errorCount++;
                                                   var message = String.Format("Line: {0} of {1}: {2}",
                                                                               e.Exception.LineNumber, file, e.Message);
                                                   Console.WriteLine(message);
                                               };


        using (XmlReader xmlReader = XmlReader.Create(file, settings))
        {
            while (xmlReader.Read())
            {
            }
        }

    }
}
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
